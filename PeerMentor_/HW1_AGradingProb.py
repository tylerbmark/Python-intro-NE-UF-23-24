# By: Gentry Trimble

# HW1_A probability density plot for grading probabilities using simular seed
import random

random.seed(42)
import matplotlib.pyplot as plt


def dice():
    # a roll of a six sided die
    return random.randrange(1, 7)


def fiverolls():
    # initalizes five different rolls
    d1 = dice()
    d2 = dice()
    d3 = dice()
    d4 = dice()
    d5 = dice()
    return d1, d2, d3, d4, d5


def equal_rolls(n):
    fivetrue = ''
    count = 0
    for i in range(n):
        # After n being verified within the main, it is set as the number of times 5 dice are rolled
        d1, d2, d3, d4, d5 = fiverolls()
        if d1 == d2 and d1 == d3 and d1 == d4 and d1 == d5:
            # checking to see if all five rolls are the same
            fivetrue = True
            count += 1  # if so then each five rolls of five are counted
    if fivetrue == True:
        return True, count  # returns the boolean and count to be used in the main
    else:
        return False, 0


def main():
    print("Let's estimate the probability of rolling five of a kind on a single roll of 5 dice!")
    prob = []
    x_values = [i * 0.00001 for i in range(101)]

    x_values_filtered = []
    prob_filtered = []

    for x in x_values:
        while True:
            n = 10000
            if n > 1:
                break
            else:
                continue
        boolean, total = equal_rolls(n)
        if boolean == False:
            prob.append(0)
        if boolean == True:
            prob_ = total / n
            prob.append(prob_)
            x_values_filtered.append(x)
            prob_filtered.append(prob_)

    plt.scatter(x_values_filtered, prob_filtered, s=500, marker='o', alpha=0.5)
    plt.xlabel('Range of x values from 0 to 0.001')
    plt.ylabel('Probabilities generated by five of a kind')
    plt.show()

main()
'''

def simulate(n):
    probabilities = []
    for i in range(1, n + 1):
        boolean, total = equal_rolls(100)
        if boolean:
            probability = total / i
            probabilities.append(probability)
    return probabilities

def PlotProb():
    count = 0
    prob = []
    while count != 5000:
        count += 100
        probabilities = simulate(count)
        prob.append(probabilities[-1])

    plt.plot(range(100, 5100, 100), prob)
    plt.xlabel('Number of Simulations')
    plt.ylabel('Probability of Five of a Kind')
    plt.title('Probability of Five of a Kind in Dice Rolls')
    plt.grid(True)
    plt.show()

PlotProb()
'''